Domain Poller {
	Subdomain EvaluationDomain {
		domainVisionStatement = "Evaluation domain vision ..."
	}

	Subdomain SkillDomain {
		domainVisionStatement = "Skill domain vision ..."
	}

	Subdomain QuestionDomain {
		domainVisionStatement = "Question domain vision ..."
	}

	Subdomain StatDomain {
		domainVisionStatement = "Stat domain vision ..."
	}

}

ContextMap Poller {
	contains SkillContext
	contains UserAnswerContext
	contains SendQuestionContext
	contains UserManagementContext
	contains EvaluationContext
	contains StatContext

	SkillContext [S]->[C] SendQuestionContext

	UserManagementContext [SK]<->[SK] SendQuestionContext

	UserAnswerContext [SK]<->[SK] UserManagementContext

	SkillContext [S]->[C] UserAnswerContext

	UserAnswerContext [S]->[C] EvaluationContext

	EvaluationContext [S]->[C] StatContext
}

BoundedContext SkillContext implements SkillDomain {
	Module questionAdmin {
		basePackage = com.esgilyon.questionddd.domain.model
		Aggregate Question {
			Entity QuestionResource {
				aggregateRoot
				- QuestionDataId questionDataId
				String questionContent
				- @States questionState
				- @Types resourceType
			}
			Entity QuestionData {
				- QuestionDataId questionDataId
				String questionContent
				- Tag tags
			}
			enum Types {
				ASSOCIATED, REFUSED, WAITING
			}
			enum States {
				aggregateLifecycle
				ASSOCIATED, REFUSED, WAITING
			}
			ValueObject QuestionDataId {
				int querstionDataId key
			}
			Service QuestionService {
				@Tag associateQuestion(QuestionId questionId, TagId tagId) : write [ -> ASSOCIATED];
			}
		}
	}
	Module questionMeta {
		basePackage = com.esgilyon.questionddd.domain.model
		Aggregate Tag {
			Entity Tag {
				aggregateRoot
				- TagId id
				String name
				- List<Category> category
			}
			ValueObject TagId {
				int tagId key
			}
			enum TagStates {
				aggregateLifecycle
				CREATED, DELETED
			}
			Service TagService {
				@Tag createTag(@TagId tagId) : write [ -> CREATED];
				@Tag deleteTag(@TagId tagId) : write [ -> DELETED];
			}
		}
		Aggregate Category {
			Entity Category {
				aggregateRoot
				- CategoryId identifier
				String name
				String description
			}
			enum CategoryEvents {
				aggregateLifecycle
				CREATED, DELETED
			}
			Service CategoryService {
				@Category createCategory(@Category category) : write [ -> CREATED];
				@Category getCategory(@CategoryId categoryId) : read-only;
			}
			ValueObject CategoryId {
				int categoryId key
			}
		}
	}
}

BoundedContext SendQuestionContext implements QuestionDomain {
	Module location {
		basePackage = com.esgilyon.questionddd.domain.model
		Aggregate UserWithPreferences {
			Entity UserWithPreferences {
				aggregateRoot
				- UserId user
				- List<Tag> preferences
			}
		}
		Aggregate QuestionNotification {
			Entity Notification {
				- @QuestionData questionId
				- @Tag tagId
			}
		}
	// event to notify user interested in a tag
	}
}

BoundedContext UserAnswerContext implements QuestionDomain {
	Module question {
		basePackage = com.esgilyon.questionddd.domain.model
		Aggregate UserAnswer {
			Entity UserAnswer {
				aggregateRoot
				- @Tag choosenAnswer
				- @User user
			}
		}
	}
}

BoundedContext EvaluationContext implements EvaluationDomain {
	Module evaluation {
		basePackage = com.esgilyon.questionddd.domain.model
		Aggregate ScoreRule {
			Entity ScoreRule {
				aggregateRoot
				int malusWhenWrong
				int bonusWhenGood
			}
		}
		Aggregate Exercice {
			Entity Evaluation {
				aggregateRoot
				int score
				- @Status status
				- @UserAnswer userAnswer
			}
			enum Status {
				OPEN,
				DONE
			}
		}
	}
}

BoundedContext StatContext implements StatDomain {
	Module stat {
		basePackage = com.esgilyon.questionddd.domain.model
		Aggregate Stat {
			Entity LeaderBoard {
				aggregateRoot
				- List<ExerciceUserAndScore> userScores
			}
			ValueObject ExerciceUserAndScore {
				String userName
				int score
			}
		}
	}
}

BoundedContext UserManagementContext {
	Module user {
		Aggregate Users {
			Entity User {
				aggregateRoot
				String firstname
				String lastname
			}
			ValueObject UserId {
				Integer id
			}
		}
	}
}

