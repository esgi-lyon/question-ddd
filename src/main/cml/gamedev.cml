
Domain Gamedev {
	Subdomain EvaluationDomain {
		domainVisionStatement = "Evaluation domain vision ..."
	}

	Subdomain SkillDomain {
		domainVisionStatement = "Skill domain vision ..."
	}

	Subdomain QuestionDomain {
		domainVisionStatement = "Question domain vision ..."
	}

	Subdomain StatDomain {
		domainVisionStatement = "Stat domain vision ..."
	}

}

ContextMap Poller {
	type = SYSTEM_LANDSCAPE
	state = TO_BE
	contains UserManagementContext, QuestionContext, SkillContext
	contains SendQuestionContext, AnswerContext
	contains EvaluationContext, StatContext

	// Links doc : https://contextmapper.org/docs/language-model/#links
	QuestionContext [S]->[C] SendQuestionContext {
		implementationTechnology = "RESTfulHTTP"
		exposedAggregates = QuestionResource
	}

	QuestionContext [P]<->[P] SkillContext {
		implementationTechnology = "RESTfulHTTP"
	}

	SkillContext [S]->[C] SendQuestionContext {
		implementationTechnology = "RESTfulHTTP"
		exposedAggregates = Skill
	}

	UserManagementContext [U, OHS, PL]->[D, ACL] SendQuestionContext {
		implementationTechnology = "RESTfulHTTP"
		exposedAggregates = User
	}

	UserManagementContext [U, OHS, PL]->[D, ACL] QuestionContext {
		implementationTechnology = "RESTfulHTTP"
		exposedAggregates = User
	}

	UserManagementContext [U, OHS, PL]->[D, ACL] AnswerContext {
		implementationTechnology = "RESTfulHTTP"
		exposedAggregates = User
	}

	SendQuestionContext [S]->[C] AnswerContext {
		implementationTechnology = "RESTfulHTTP"
		exposedAggregates = UserPreferences, QuestionNotification
	}

	AnswerContext [S]->[C] EvaluationContext {
		implementationTechnology = "RESTfulHTTP"
		exposedAggregates = Answer
	}

	EvaluationContext [S]->[C] StatContext {
		implementationTechnology = "RESTfulHTTP"
		exposedAggregates = Exercice
	}
}

BoundedContext UserManagementContext {
	type = SYSTEM
	implementationTechnology = "Java, Spring App"
	Application {
		Flow Authentication {
			command Register delegates to User [WAITING_VALIDATION -> WAITING_VALIDATION] emits event UserWaitingForValidation
			command ValidateUser delegates to User [WAITING_VALIDATION -> VALIDATED X REJECTED] emits event UserValidated X UserRejected
			command ViewUserByEmail delegates to User emits event UserViewed
		}
	}
	Aggregate User {
		Entity UserInfos {
			aggregateRoot
			String firstname
			String lastname
			String password
			String mail email
			- @Roles role
			- @UserStatus status
			def void validateUser();
			def void promoteToStudent();
			def void promoteToEvaluator();
		}
		enum Roles {
			EVALUATOR, STUDENT, INQUISITOR, NONE
		}
		enum UserStatus {
			aggregateLifecycle
				VALIDATED, WAITING_VALIDATION, REJECTED
		}
		Command Register {
			String firstname
			String lastname
			String mail email
			String password
			- Roles role
		}
		Command ValidateUser {
			- UserInfos userInfos
		}
		Command RejectUser {
			- UserInfos userInfos
		}
		Command ViewUserByEmail {
			String mail email
		}
		DomainEvent UserWaitingForValidation {
			- UserInfos userInfos
		}
		DomainEvent UserValidated {
			- UserInfos userInfos
		}
		DomainEvent UserRejected {
			- UserInfos userInfos
		}
		DomainEvent UserViewed {
			- UserInfos userInfos
		}
	}
}

BoundedContext QuestionContext implements SkillDomain {
	type = SYSTEM
	implementationTechnology = "Java, Spring App"
	Application {
		/* For event trigger in flow :
		 *   X: alternative command invokation (exclusive; only one); 
		 *   +: concurrent command invokation (all commands called); 
		 *   O: alternative command invokation (inclusive; one or multiple)
		 */
		Flow AssociateQuestionFlow {
			command CreateResource delegates to QuestionResource [WAITING -> WAITING] emits event ResourceWaitingForAssociation
			command ValidateResourceTagLinkage delegates to QuestionResource [WAITING -> ASSOCIATED X REFUSED] emits event ResourceAcceptedAssociation X ResourceRefusedAssociation
		}
	}
	Aggregate QuestionResource {
		Entity QuestionResource {
			aggregateRoot
			String questionContent
			- @States questionState
			- @Types resourceType
			- QuestionResourceTagInfos tagInfos
			def boolean isWaitingForAssociation();
			def boolean accept();
			def boolean refuse();
			def QuestionResource associate(@Tag tag);
		}
		enum Types {
			IMG_URL, URL, TEXT
		}
		enum States {
			aggregateLifecycle
				WAITING, ASSOCIATED, REFUSED
		}
		ValueObject QuestionResourceTagInfos {
			Long tagId
			String name
		}
		DomainEvent ResourceWaitingForAssociation {
			- QuestionResource questionId
			- QuestionResourceTagInfos tagInfos
		}
		DomainEvent ResourceAcceptedAssociation {
			- QuestionResource questionId
			- QuestionResourceTagInfos tagInfos
		}
		DomainEvent ResourceRefusedAssociation {
			- QuestionResource questionId
			- QuestionResourceTagInfos tagInfos
		}
		Command CreateResource {
			- QuestionResource questionId
		}
		Command ValidateResourceTagLinkage {
			- QuestionResource questionId
		}
	}
}

BoundedContext SkillContext implements SkillDomain {
	type = SYSTEM
	implementationTechnology = "Java, Spring App"
	Application {
		Flow CreateSkillFlow {
			command CreateCategory emits event CategoryCreated
			command CreateTag delegates to Skill [CREATED -> CREATED] emits event TagCreated
		}
	}
	Aggregate Skill {
		Entity Tag {
			aggregateRoot
			String name
			- CreatedById createdById
			def Tag setCategory(@Category category);
		}
		ValueObject TagInfos {
			Long tagId
			String name
		}
		enum TagStates {
			aggregateLifecycle
				CREATED, DELETED
		}
		Entity Category {
			String name
			String description
			- List<Tag> tags
			def Category addTag(@Tag tag);
		}
		enum CategoryEvents {
			CREATED, DELETED
		}
		ValueObject CreatedById {
			Long id
		}
		DomainEvent TagCreated {
			- Tag tagId
		}
		DomainEvent CategoryCreated {
			- Category categoryId
		}
		Command CreateTag {
			- Tag tag
		}
		Command CreateCategory {
			- Category category
		}
	}
}

BoundedContext SendQuestionContext implements QuestionDomain {
	// Ubiquitous Language for question notion is here a "notification"s
	type = SYSTEM
	implementationTechnology = "Java, Spring App"
	Application {
		Flow CreateChoiceFlow {
			// Randomized choice creation
			command AddPreferences delegates to UserPreferences emits event PreferencesAdded
			command PrepareQuestion delegates to QuestionNotification emits event CreatedQuestion
			event CreatedQuestion triggers command SendByPreferences
			command SendByPreferences delegates to QuestionNotification emits event NotifiedQuestion
			command ViewTagsForQuestion delegates to QuestionNotification emits event TagChoicesListed
		}
	}
	Aggregate UserPreferences {
		Entity UserPreferences {
			aggregateRoot
			- UserWithPreferencesId user
			- List<UserPreferencesTagInfos> preferences
			def UserPreferences addPreference(@TagInfos tagId);
		}
		ValueObject UserWithPreferencesId {
			String mail email
		}
		ValueObject UserPreferencesTagInfos {
			Long tagId
		}
		Command AddPreferences {
			- UserPreferencesTagInfos preferences
		}
		DomainEvent PreferencesAdded {
			- UserPreferences preferences
		}
	}
	Aggregate QuestionNotification {
		Entity QuestionSent {
			aggregateRoot
			- QuestionNotificationStatus status
			- List<QuestionSentTagInfos> tags
			Date sentDate nullable
			Date viewedDate nullable
			Date answeredDate nullable
			def QuestionSent send();
			def QuestionSent view();
			def QuestionSent answer();
			- ResourceId resourceId
		}
		Entity NotifiedUsers {
			- QuestionSent question
			- List<UserWithPreferencesId> user
		}
		ValueObject QuestionSentTagInfos {
			Long tagId
			String tagName
		}
		ValueObject ResourceId {
			Long id
		}
		enum QuestionNotificationStatus {
			aggregateLifecycle
				PREPARING, SENT, VIEWED, ANSWERED
		}
		DomainEvent CreatedQuestion {
			- QuestionSent questionAndTag
		}
		DomainEvent NotifiedQuestion {
			- NotifiedUsers questionResource
		}
		DomainEvent QuestionSentTagInfosViewed {
			- List<QuestionSentTagInfos> tagInfos
		}
		Command PrepareQuestion {
			Long resourceId
		}
		Command SendByPreferences {
			- QuestionSent questionToSend
		}
		Command ViewTagsForQuestion {
			- QuestionSent questionToSend
		}
	}
}

BoundedContext AnswerContext implements QuestionDomain {
	type = SYSTEM
	implementationTechnology = "Java, Spring App"
	Application {
		Flow ChoiceSubmitFlow {
			command TagChoicesList delegates to Answer [OPEN -> OPEN] emits event TagChoicesListed + AnswerCreated
			command AnswerSubmit delegates to Answer emits event AnswerSubmitted
			command ViewUserEvaluation delegates to Answer emits event UserEvaluationViewed
		}
	}
	Aggregate Answer {
		Entity Answer {
			aggregateRoot
			- QuestionSentId question
			- AnsweredTag answeredTag
			- UserEmail userEmail
			- AnswerState answerState
		}
		enum AnswerState {
			aggregateLifecycle
				DONE, OPEN
		}
		ValueObject AvailableAnswer {
			Long tagId
			String tagName
		}
		ValueObject QuestionSentId {
			Long questionId
		}
		ValueObject AnsweredTag {
			Long tagId
		}
		ValueObject UserEmail {
			String mail email
		}
		DomainEvent TagChoicesListed {
			- @Answer answerCreated
			- List<AvailableAnswer> tags
		}
		DomainEvent AnswerSubmitted {
			- @Answer answer
		}
		DomainEvent AnswerCreated {
			- @Answer answer
		}
		DomainEvent UserEvaluationViewed {
			- @Answer answer
		}
		// Query
		Command TagChoicesList {
			- QuestionSentId questionSent
		}
		Command AnswerSubmit {
			- @Answer answer
		}
		Command ViewUserEvaluation {
			- UserEmail user
		}
	}
}

BoundedContext EvaluationContext implements EvaluationDomain {
	type = SYSTEM
	implementationTechnology = "Java, Spring App"
	Application {
		Flow EvaluationFlow {
			command CreateEvaluation delegates to Exercice [OPENED -> VALID X INVALID] emits event EvaluationCreated
			command AwardPointForEvaluation delegates to PointAwardRule emits event AwardedPoint
		}
	}
	Aggregate Exercice {
		Entity Evaluation {
			aggregateRoot
			int score
			- @Status status
			- EvaluationTag tag
			- EvaluationQuestion question
			- AnsweringUser user
			- @DifficultyLevel answeredQuestionDifficultyLevel
			String evaluatorMail email
		}
		enum Status {
			aggregateLifecycle
			VALID, INVALID, OPENED
		}
		enum DifficultyLevel {
			EASY, MEDIUM, HARD
		}
		ValueObject AnsweringUser {
			String mail email
		}
		// Valid tag of question resource
		ValueObject EvaluationTag {
			Long tagId
			String name
		}
		ValueObject EvaluationQuestion {
			Long questionId
		}
		ValueObject EvaluatedAnswer {
			Long answerId
		}
		DomainEvent EvaluationCreated {
			- @Evaluation evaluation
		}
		DomainEvent NewAnswerNotified {
			- @EvaluatedAnswer answer
		}
		Command CreateEvaluation {
			- @EvaluatedAnswer answer
			- @DifficultyLevel difficultyLevel
		}
	}
	Aggregate PointAwardRule {
		Entity PointAwardRule {
			aggregateRoot
			int scoreEvolution
			- @DifficultyLevel difficultyLevel
			- @UserLevel userLevel
			def int pointsForRefusedOrValidated();
		}
		Entity UserAndLevel {
			String mail email
			- @UserLevel userLevel
		}
		enum UserLevel {
			aggregateLifecycle
				NEW, REGULAR, EXPERT
		}
		DomainEvent AwardedPoint {
			- @EvaluatedAnswer answer
		}
		Command AwardPointForEvaluation {
			- @Evaluation evaluation
		}
	}
}

BoundedContext StatContext implements StatDomain {
	type = SYSTEM
	implementationTechnology = "Java, Spring App"
	Application {
		Flow ViewStatsFlow {
			command ViewLeaderBoard delegates to LeaderBoard emits event LeaderBoardViewed
			command ViewStats delegates to QuestionResource emits event UserStatsViewed X QuestionStatsViewed X LeaderBoardViewed
		}
	}
	Aggregate LeaderBoard {
		Entity LeaderBoardEntry {
			String userLevel // "Expert", "Regular", "New
			Integer score
			- StatisticSubjectUser users
		}
		Entity LeaderBoard {
			- List<LeaderBoardEntry> entries
			def LeaderBoard addEntry(@LeaderBoardEntry entry);
		}
		ValueObject StatisticSubjectTag {
			Long tagId
		}
		Command ViewLeaderBoard {
			- StatisticSubjectTag tag
		}
		DomainEvent LeaderBoardViewed {
			- StatisticSubjectTag tag
			- LeaderBoard newUserLeaderboard
		}
	}
	Aggregate Statistic {
		Entity EvaluationStats {
			aggregateRoot
			- List<EvaluationId> evaluation
		}
		ValueObject EvaluationId {
			Long evaluationId
		}
		ValueObject StatisticSubjectUser {
			String mail
		}
		ValueObject StatisticSubjectQuestion {
			Long questionId
		}
		DomainEvent UserStatsViewed {
			- StatisticSubjectUser user
		}
		DomainEvent QuestionStatsViewed {
			- StatisticSubjectQuestion question
		}
		Command ViewStats {
			- @StatisticSubjectUser user nullable
			- @StatisticSubjectQuestion question nullable
		}
	}
}

