
Domain Gamedev {
	Subdomain EvaluationDomain {
		domainVisionStatement = "Evaluation domain vision ..."
	}

	Subdomain SkillDomain {
		domainVisionStatement = "Skill domain vision ..."
	}

	Subdomain QuestionDomain {
		domainVisionStatement = "Question domain vision ..."
	}

	Subdomain StatDomain {
		domainVisionStatement = "Stat domain vision ..."
	}

}

ContextMap Poller {
	type = SYSTEM_LANDSCAPE
	state = TO_BE
	contains UserManagementContext, QuestionContext, SkillContext
	contains SendQuestionContext, AnswerContext
	contains EvaluationContext, StatContext

	// Links doc : https://contextmapper.org/docs/language-model/#links
	QuestionContext [S]->[C] SendQuestionContext {
		implementationTechnology = "RESTfulHTTP"
		exposedAggregates = Question
	}

	QuestionContext [P]<->[P] SkillContext {
		implementationTechnology = "RESTfulHTTP"
	}

	SkillContext [S]->[C] SendQuestionContext {
		implementationTechnology = "RESTfulHTTP"
		exposedAggregates = Skill
	}

	UserManagementContext [U, OHS, PL]->[D, ACL] SendQuestionContext {
		implementationTechnology = "RESTfulHTTP"
		exposedAggregates = User
	}

	UserManagementContext [U, OHS, PL]->[D, ACL] QuestionContext {
		implementationTechnology = "RESTfulHTTP"
		exposedAggregates = User
	}

	UserManagementContext [U, OHS, PL]->[D, ACL] AnswerContext {
		implementationTechnology = "RESTfulHTTP"
		exposedAggregates = User
	}

	UserManagementContext [U, OHS, PL]->[D, ACL] SkillContext {
		implementationTechnology = "RESTfulHTTP"
		exposedAggregates = User
	}

	SendQuestionContext [S]->[C] AnswerContext {
		implementationTechnology = "RESTfulHTTP"
		exposedAggregates = UserPreferences, QuestionNotification
	}

	AnswerContext [S]->[C] EvaluationContext {
		implementationTechnology = "RESTfulHTTP"
		exposedAggregates = Answer
	}

	EvaluationContext [S]->[C] StatContext {
		implementationTechnology = "RESTfulHTTP"
		exposedAggregates = Exercice
	}
}

BoundedContext UserManagementContext {
	type = SYSTEM
	implementationTechnology = "Java, Spring App"
	Aggregate User {
		Entity UserInfos {
			aggregateRoot
			String firstname
			String lastname
			- @Roles role
			- @UserStatus status
			def AddressId validateUser();
			def boolean promoteToStudent();
			def boolean promoteToEvaluator();
		}
		enum Roles {
			EVALUATOR, STUDENT, NONE
		}
		enum UserStatus {
			aggregateLifecycle
				VALIDATED, WAITING_VALIDATION
		}
		ValueObject UserId {
			Integer id
		}
	}
}

BoundedContext QuestionContext implements SkillDomain {
	type = SYSTEM
	implementationTechnology = "Java, Spring App"
	Application {
		Command AssociateQuestion
		Command AcceptQuestion
		Command RejectQuestion
		Command CreateQuestionData
		/* For event trigger in flow :
		 *   X: alternative command invokation (exclusive; only one); 
		 *   +: concurrent command invokation (all commands called); 
		 *   O: alternative command invokation (inclusive; one or multiple)
		 */
		Flow AssociateQuestionFlow {
			command AssociateQuestion delegates to Question [WAITING -> WAITING] emits event QuestionWaitingForAssociation
			event QuestionWaitingForAssociation triggers command AcceptQuestion X RejectQuestion
			command AcceptQuestion delegates to Question [WAITING -> ASSOCIATED] emits event QuestionAcceptedAssociation
			command RejectQuestion delegates to Question [WAITING -> REFUSED] emits event QuestionRefusedAssociation
			event QuestionAcceptedAssociation triggers command CreateQuestionData
		}
	}
	Aggregate Question {
		Entity QuestionResource {
			aggregateRoot
			String questionContent
			- @States questionState
			- @Types resourceType
			- Tag tag
			def boolean isWaitingForAssociation();
			def boolean isAssociated();
			def boolean isRefused();
			def QuestionResource associate(@Tag tag);
		}
		enum Types {
			IMG_URL, URL, TEXT
		}
		enum States {
			aggregateLifecycle
				WAITING, ASSOCIATED, REFUSED
		}
		DomainEvent QuestionWaitingForAssociation {
			- QuestionResource questionId
			- TagId tagId
		}
		DomainEvent QuestionAcceptedAssociation {
			- QuestionResource questionId
			- TagId tagId
		}
		DomainEvent QuestionRefusedAssociation {
			- QuestionResource questionId
			- TagId tagId
		}
		ValueObject QuestionResourceTag {
			- QuestionResource questionId
			- TagId tagId
		}
	}
}

BoundedContext SkillContext implements SkillDomain {
	type = SYSTEM
	implementationTechnology = "Java, Spring App"
	Application {
		Command CreateTag
		Command CreateCategory
		Flow CreateSkillFlow {
			command CreateTag delegates to Skill [CREATED -> CREATED] emits event TagCreated
			command CreateCategory emits event CategoryCreated
		}
	}
	Aggregate Skill {
		Entity Tag {
			aggregateRoot
			String name
			- @UserInfos createdBy
			def Tag setCategory(@Category category);
		}
		ValueObject TagId {
			Integer tagId key
		}
		enum TagStates {
			aggregateLifecycle
				CREATED, DELETED
		}
		Entity Category {
			- CategoryId identifier
			String name
			String description
			- List<Tag> tags
			- @UserInfos createdBy
			def Category addTag(@Tag tag);
		}
		enum CategoryEvents {
			CREATED, DELETED
		}
		ValueObject CategoryId {
			Integer categoryId key
		}
		DomainEvent TagCreated {
			- TagId tagId
		}
		DomainEvent CategoryCreated {
			- CategoryId categoryId
		}
	}
}

BoundedContext SendQuestionContext implements QuestionDomain {
	// Ubiquitous Language for question notion is here a "notification"s
	type = SYSTEM
	implementationTechnology = "Java, Spring App"
	Application {
		Command CreateQuestion
		Command SendQuestionByTagsPreferences
		Flow CreateChoiceFlow {
			// Randomized choice creation
			command CreateQuestion delegates to Question emits event CreatedQuestion
			event CreatedQuestion triggers command SendQuestionByTagsPreferences
			command SendQuestionByTagsPreferences delegates to Question emits event NotifiedQuestion
		}
	}
	Aggregate UserPreferences {
		Entity UserPreferences {
			aggregateRoot
			- UserId user
			- List<TagId> preferences
			def UserPreferences addPreference(@TagId tagId);
		}
	}
	Aggregate QuestionNotification {
		Entity QuestionSent {
			aggregateRoot
			- Question question
			- QuestionNotificationStatus status
			Date sentDate
			Date viewedDate
			Date answeredDate
			def QuestionSent send();
			def QuestionSent view();
			def QuestionSent answer();
		}
		enum QuestionNotificationStatus {
			aggregateLifecycle
				SENT, VIEWED, ANSWERED
		}
		DomainEvent CreatedQuestion {
			- QuestionSent questionAndTag
		}
		DomainEvent NotifiedQuestion {
			- QuestionSent questionResource
		}
		ValueObject Question {
			- List<QuestionResourceTag> resourcesWithRandomized
			- QuestionResourceTag validQuestionResources
		}
	}
}

BoundedContext AnswerContext implements QuestionDomain {
	type = SYSTEM
	implementationTechnology = "Java, Spring App"
	Application {
		Command TagChoicesList
		Command AnswerSubmit
		Flow ChoiceSubmitFlow {
			command TagChoicesList delegates to Question emits event TagChoicesListed
			command AnswerSubmit delegates to Question emits event AnswerSubmitted
		}
	}
	Aggregate Answer {
		Entity Answer {
			aggregateRoot
			- Question question
			- @UserInfos user
			- AnsweredTag answeredTag
		}
		DomainEvent TagChoicesListed
		DomainEvent AnswerSubmitted {
			- @Answer answer
		}
		ValueObject AnsweredTag {
			Integer id
			String name
		}
	}
}

BoundedContext EvaluationContext implements EvaluationDomain {
	type = SYSTEM
	implementationTechnology = "Java, Spring App"
	Application {
		Command CheckAnswer
		Command CreateEvaluation
		Command AwardPointForEvaluation
		Flow EvaluationFlow {
			event AnswerSubmitted triggers command CheckAnswer
			command CheckAnswer delegates to Question emits event AnswerValidated X AnswerRefused
			event AnswerValidated triggers command CreateEvaluation
			event AnswerRefused triggers command CreateEvaluation
			command CreateEvaluation delegates to Question emits event EvaluationCreated
			command AwardPointForEvaluation delegates to Question emits event AwardedPoint
		}
	}
	Aggregate Exercice {
		Entity Evaluation {
			aggregateRoot
			Integer score
			- @Status status
			- EvaluationTag tag
			- EvaluationQuestion question
			- AnsweringUser user
			- @DifficultyLevel answeredQuestionDifficultyLevel
		}
		DomainEvent AnswerValidated {
			- @Answer answer
		}
		DomainEvent AnswerRefused {
			- @Answer answer
		}
		DomainEvent EvaluationCreated {
			- @Evaluation evaluation
		}
		enum Status {
			aggregateLifecycle
				OPEN, DONE
		}
		enum DifficultyLevel {
			EASY, MEDIUM, HARD
		}
		ValueObject AnsweringUser {
			Integer id
			String name
		}
		// Valid tag of question resource
		ValueObject EvaluationTag {
			Integer id
			String name
		}
		ValueObject EvaluationQuestion {
			Integer id
		}
	}
	Aggregate PointAwardRule {
		Entity PointAwardRule {
			aggregateRoot
			Integer scoreEvolution
			- @DifficultyLevel difficultyLevel
			- @UserLevel userLevel
			def Integer pointsForRefusedOrValidated();
		}
		DomainEvent AwardedPoInteger {
			- @Answer answer
		}
		enum UserLevel {
			aggregateLifecycle
				NEW, REGULAR, EXPERT
		}
	}
}

BoundedContext StatContext implements StatDomain {
	type = SYSTEM
	implementationTechnology = "Java, Spring App"
	Application {
		Command ViewStats
		Flow ViewStatsFlow {
			command ViewStats delegates to Question emits event UserStatsViewed X QuestionStatsViewed X TagStatsViewed
		}
	}
	Aggregate Statistic {
		Entity LeaderBoard {
			aggregateRoot
			- List<Evaluation> evaluation
			- DifficultyLevel difficultyLevel
			- EvaluationTag tagId
		}
		DomainEvent UserStatsViewed {
			- AnsweringUser user
		}
		DomainEvent QuestionStatsViewed {
			- EvaluationQuestion question
		}
		DomainEvent TagStatsViewed {
			- EvaluationTag tag
		}
	}
}
